{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "95667bb1",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-12-24T14:27:52.140044Z",
     "iopub.status.busy": "2024-12-24T14:27:52.139472Z",
     "iopub.status.idle": "2024-12-24T14:27:54.618084Z",
     "shell.execute_reply": "2024-12-24T14:27:54.617124Z"
    },
    "papermill": {
     "duration": 2.483837,
     "end_time": "2024-12-24T14:27:54.619977",
     "exception": false,
     "start_time": "2024-12-24T14:27:52.136140",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "import xgboost as xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "678a95a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-24T14:27:54.625014Z",
     "iopub.status.busy": "2024-12-24T14:27:54.624500Z",
     "iopub.status.idle": "2024-12-24T14:27:54.631499Z",
     "shell.execute_reply": "2024-12-24T14:27:54.630677Z"
    },
    "papermill": {
     "duration": 0.011019,
     "end_time": "2024-12-24T14:27:54.633099",
     "exception": false,
     "start_time": "2024-12-24T14:27:54.622080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CreditScoringModel:\n",
    "    def __init__(self):\n",
    "        self.scaler = StandardScaler()\n",
    "        self.label_encoders = {}\n",
    "        self.model = None\n",
    "        self.feature_importance = None\n",
    "        \n",
    "    def preprocess_features(self, data):\n",
    "        \"\"\"\n",
    "        Preprocess raw credit application data.\n",
    "        \"\"\"\n",
    "        df = data.copy()\n",
    "        \n",
    "        # Handle missing values\n",
    "        numerical_columns = df.select_dtypes(include=['int64', 'float64']).columns\n",
    "        categorical_columns = df.select_dtypes(include=['object']).columns\n",
    "        \n",
    "        # Fill missing numerical values with median\n",
    "        for col in numerical_columns:\n",
    "            df[col].fillna(df[col].median(), inplace=True)\n",
    "            \n",
    "        # Fill missing categorical values with mode\n",
    "        for col in categorical_columns:\n",
    "            df[col].fillna(df[col].mode()[0], inplace=True)\n",
    "            \n",
    "        # Encode categorical variables\n",
    "        for col in categorical_columns:\n",
    "            if col not in self.label_encoders:\n",
    "                self.label_encoders[col] = LabelEncoder()\n",
    "            df[col] = self.label_encoders[col].fit_transform(df[col])\n",
    "            \n",
    "        return df"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.427878,
   "end_time": "2024-12-24T14:27:55.354091",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-24T14:27:49.926213",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport xgboost as xgb","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class CreditScoringModel:\n    def __init__(self):\n        self.scaler = StandardScaler()\n        self.label_encoders = {}\n        self.model = None\n        self.feature_importance = None\n        \n    def preprocess_features(self, data):\n        \"\"\"\n        Preprocess raw credit application data.\n        \"\"\"\n        df = data.copy()\n        \n        # Handle missing values\n        numerical_columns = df.select_dtypes(include=['int64', 'float64']).columns\n        categorical_columns = df.select_dtypes(include=['object']).columns\n        \n        # Fill missing numerical values with median\n        for col in numerical_columns:\n            df[col].fillna(df[col].median(), inplace=True)\n            \n        # Fill missing categorical values with mode\n        for col in categorical_columns:\n            df[col].fillna(df[col].mode()[0], inplace=True)\n            \n        # Encode categorical variables\n        for col in categorical_columns:\n            if col not in self.label_encoders:\n                self.label_encoders[col] = LabelEncoder()\n            df[col] = self.label_encoders[col].fit_transform(df[col])\n            \n        return df","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}